import SwiftUI

struct SettingsView: View {
    @Binding var settings: CleanupSettings
    @Environment(\.dismiss) private var dismiss
    @State private var showingCustomRuleEditor = false
    @State private var newRuleName = ""
    @State private var newRulePattern = ""
    
    var body: some View {
        NavigationView {
            VStack(spacing: 0) {\n                // Header\n                HStack {\n                    Text(\"설정\")\n                        .font(.title)\n                        .fontWeight(.bold)\n                    \n                    Spacer()\n                    \n                    Button(\"완료\") {\n                        dismiss()\n                    }\n                    .buttonStyle(.borderedProminent)\n                }\n                .padding()\n                \n                Divider()\n                \n                ScrollView {\n                    VStack(spacing: 24) {\n                        // General Settings\n                        SettingsSection(title: \"일반\", icon: \"gearshape\") {\n                            VStack(spacing: 12) {\n                                SettingsToggle(\n                                    title: \"시작시 자동 스캔\",\n                                    subtitle: \"앱이 실행될 때 자동으로 시스템 스캔\",\n                                    isOn: $settings.scanOnStartup\n                                )\n                                \n                                SettingsToggle(\n                                    title: \"자동 스캔\",\n                                    subtitle: \"백그라운드에서 주기적으로 스캔\",\n                                    isOn: $settings.autoScan\n                                )\n                                \n                                SettingsToggle(\n                                    title: \"숨겨진 파일 표시\",\n                                    subtitle: \"시스템 숨김 파일도 스캔 대상에 포함\",\n                                    isOn: $settings.showHiddenFiles\n                                )\n                            }\n                        }\n                        \n                        // Safety Settings\n                        SettingsSection(title: \"안전\", icon: \"shield.checkered\") {\n                            VStack(spacing: 12) {\n                                SettingsToggle(\n                                    title: \"삭제 전 확인\",\n                                    subtitle: \"파일 삭제 전 확인 대화상자 표시\",\n                                    isOn: $settings.confirmBeforeDelete\n                                )\n                                \n                                SettingsToggle(\n                                    title: \"백업 생성\",\n                                    subtitle: \"중요 파일 삭제 전 백업 생성\",\n                                    isOn: $settings.createBackup\n                                )\n                            }\n                        }\n                        \n                        // Filter Settings\n                        SettingsSection(title: \"필터\", icon: \"line.3.horizontal.decrease.circle\") {\n                            VStack(spacing: 12) {\n                                HStack {\n                                    VStack(alignment: .leading, spacing: 4) {\n                                        Text(\"최대 파일 연령\")\n                                            .font(.subheadline)\n                                            .fontWeight(.medium)\n                                        \n                                        Text(\"이보다 오래된 파일을 '오래된 파일'로 분류\")\n                                            .font(.caption)\n                                            .foregroundColor(.secondary)\n                                    }\n                                    \n                                    Spacer()\n                                    \n                                    HStack {\n                                        Slider(value: Binding(\n                                            get: { Double(settings.maxFileAge) },\n                                            set: { settings.maxFileAge = Int($0) }\n                                        ), in: 30...1095, step: 1)\n                                        .frame(width: 120)\n                                        \n                                        Text(\"\\(settings.maxFileAge)일\")\n                                            .font(.caption)\n                                            .frame(width: 40, alignment: .trailing)\n                                    }\n                                }\n                                \n                                HStack {\n                                    VStack(alignment: .leading, spacing: 4) {\n                                        Text(\"최소 파일 크기\")\n                                            .font(.subheadline)\n                                            .fontWeight(.medium)\n                                        \n                                        Text(\"이보다 작은 파일은 무시\")\n                                            .font(.caption)\n                                            .foregroundColor(.secondary)\n                                    }\n                                    \n                                    Spacer()\n                                    \n                                    HStack {\n                                        Slider(value: Binding(\n                                            get: { Double(settings.minFileSize) },\n                                            set: { settings.minFileSize = Int64($0) }\n                                        ), in: 1024...104857600, step: 1024) // 1KB to 100MB\n                                        .frame(width: 120)\n                                        \n                                        Text(settings.minFileSize.formatBytes())\n                                            .font(.caption)\n                                            .frame(width: 60, alignment: .trailing)\n                                    }\n                                }\n                            }\n                        }\n                        \n                        // Excluded Paths\n                        SettingsSection(title: \"제외 경로\", icon: \"folder.badge.minus\") {\n                            VStack(spacing: 8) {\n                                ForEach(settings.excludedPaths.indices, id: \\.self) { index in\n                                    HStack {\n                                        Image(systemName: \"folder\")\n                                            .foregroundColor(.secondary)\n                                        \n                                        Text(settings.excludedPaths[index])\n                                            .font(.system(.body, design: .monospaced))\n                                        \n                                        Spacer()\n                                        \n                                        Button {\n                                            settings.excludedPaths.remove(at: index)\n                                        } label: {\n                                            Image(systemName: \"minus.circle.fill\")\n                                                .foregroundColor(.red)\n                                        }\n                                        .buttonStyle(.plain)\n                                    }\n                                    .padding(.horizontal, 12)\n                                    .padding(.vertical, 8)\n                                    .background(Color(NSColor.controlBackgroundColor))\n                                    .cornerRadius(6)\n                                }\n                                \n                                Button(\"경로 추가\") {\n                                    let panel = NSOpenPanel()\n                                    panel.canChooseFiles = false\n                                    panel.canChooseDirectories = true\n                                    panel.allowsMultipleSelection = false\n                                    \n                                    if panel.runModal() == .OK {\n                                        if let url = panel.url {\n                                            settings.excludedPaths.append(url.path)\n                                        }\n                                    }\n                                }\n                                .buttonStyle(.bordered)\n                            }\n                        }\n                        \n                        // Custom Rules\n                        SettingsSection(title: \"사용자 정의 규칙\", icon: \"slider.horizontal.3\") {\n                            VStack(spacing: 8) {\n                                ForEach(settings.customRules) { rule in\n                                    CustomRuleRow(rule: rule) {\n                                        if let index = settings.customRules.firstIndex(where: { $0.id == rule.id }) {\n                                            settings.customRules.remove(at: index)\n                                        }\n                                    }\n                                }\n                                \n                                Button(\"규칙 추가\") {\n                                    showingCustomRuleEditor = true\n                                }\n                                .buttonStyle(.bordered)\n                            }\n                        }\n                    }\n                    .padding()\n                }\n            }\n        }\n        .frame(width: 600, height: 700)\n        .sheet(isPresented: $showingCustomRuleEditor) {\n            CustomRuleEditor(\n                name: $newRuleName,\n                pattern: $newRulePattern\n            ) { name, pattern in\n                let newRule = CleanupSettings.CustomRule(\n                    name: name,\n                    pattern: pattern\n                )\n                settings.customRules.append(newRule)\n                newRuleName = \"\"\n                newRulePattern = \"\"\n                showingCustomRuleEditor = false\n            } onCancel: {\n                newRuleName = \"\"\n                newRulePattern = \"\"\n                showingCustomRuleEditor = false\n            }\n        }\n    }\n}\n\nstruct SettingsSection<Content: View>: View {\n    let title: String\n    let icon: String\n    @ViewBuilder let content: () -> Content\n    \n    var body: some View {\n        VStack(spacing: 12) {\n            HStack {\n                HStack(spacing: 8) {\n                    Image(systemName: icon)\n                        .foregroundColor(.accentColor)\n                    \n                    Text(title)\n                        .font(.headline)\n                        .fontWeight(.semibold)\n                }\n                \n                Spacer()\n            }\n            \n            content()\n        }\n        .padding()\n        .background(Color(NSColor.controlBackgroundColor))\n        .cornerRadius(12)\n    }\n}\n\nstruct SettingsToggle: View {\n    let title: String\n    let subtitle: String\n    @Binding var isOn: Bool\n    \n    var body: some View {\n        HStack {\n            VStack(alignment: .leading, spacing: 4) {\n                Text(title)\n                    .font(.subheadline)\n                    .fontWeight(.medium)\n                \n                Text(subtitle)\n                    .font(.caption)\n                    .foregroundColor(.secondary)\n            }\n            \n            Spacer()\n            \n            Toggle(\"\", isOn: $isOn)\n                .toggleStyle(.switch)\n        }\n    }\n}\n\nstruct CustomRuleRow: View {\n    let rule: CleanupSettings.CustomRule\n    let onDelete: () -> Void\n    \n    var body: some View {\n        HStack {\n            VStack(alignment: .leading, spacing: 4) {\n                Text(rule.name)\n                    .font(.subheadline)\n                    .fontWeight(.medium)\n                \n                Text(rule.pattern)\n                    .font(.caption)\n                    .foregroundColor(.secondary)\n                    .font(.system(.caption, design: .monospaced))\n            }\n            \n            Spacer()\n            \n            HStack(spacing: 4) {\n                Image(systemName: rule.riskLevel.icon)\n                    .font(.caption)\n                Text(rule.riskLevel.rawValue)\n                    .font(.caption)\n            }\n            .foregroundColor(rule.riskLevel.color)\n            .padding(.horizontal, 6)\n            .padding(.vertical, 2)\n            .background(rule.riskLevel.color.opacity(0.1))\n            .cornerRadius(4)\n            \n            Button {\n                onDelete()\n            } label: {\n                Image(systemName: \"trash\")\n                    .foregroundColor(.red)\n            }\n            .buttonStyle(.plain)\n        }\n        .padding(.horizontal, 12)\n        .padding(.vertical, 8)\n        .background(Color(NSColor.controlBackgroundColor))\n        .cornerRadius(6)\n    }\n}\n\nstruct CustomRuleEditor: View {\n    @Binding var name: String\n    @Binding var pattern: String\n    let onSave: (String, String) -> Void\n    let onCancel: () -> Void\n    \n    var body: some View {\n        VStack(spacing: 20) {\n            Text(\"사용자 정의 규칙 추가\")\n                .font(.title2)\n                .fontWeight(.bold)\n            \n            VStack(alignment: .leading, spacing: 8) {\n                Text(\"규칙 이름\")\n                    .font(.subheadline)\n                    .fontWeight(.medium)\n                \n                TextField(\"예: 임시 로그 파일\", text: $name)\n                    .textFieldStyle(.roundedBorder)\n            }\n            \n            VStack(alignment: .leading, spacing: 8) {\n                Text(\"파일 패턴\")\n                    .font(.subheadline)\n                    .fontWeight(.medium)\n                \n                TextField(\"예: *.tmp, *.log\", text: $pattern)\n                    .textFieldStyle(.roundedBorder)\n                    .font(.system(.body, design: .monospaced))\n                \n                Text(\"와일드카드 * 사용 가능. 여러 패턴은 쉼표로 구분\")\n                    .font(.caption)\n                    .foregroundColor(.secondary)\n            }\n            \n            HStack {\n                Button(\"취소\") {\n                    onCancel()\n                }\n                .buttonStyle(.bordered)\n                \n                Spacer()\n                \n                Button(\"저장\") {\n                    onSave(name, pattern)\n                }\n                .buttonStyle(.borderedProminent)\n                .disabled(name.isEmpty || pattern.isEmpty)\n            }\n        }\n        .padding()\n        .frame(width: 400)\n    }\n}"