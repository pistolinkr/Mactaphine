import SwiftUI

// MARK: - Enhanced Header View

struct EnhancedHeaderView: View {
    @ObservedObject var dataScanner: AdvancedDataScanner
    @Binding var searchText: String
    @Binding var sortOption: ContentView.SortOption
    @Binding var showOnlySafe: Bool
    @Binding var showingSettings: Bool
    @Binding var showingReports: Bool
    
    var body: some View {
        VStack(spacing: 16) {
            // Top row with title and settings
            HStack {
                HStack(spacing: 12) {
                    Image(systemName: "sparkles")
                        .font(.title)
                        .foregroundStyle(.linearGradient(colors: [.blue, .purple], startPoint: .topLeading, endPoint: .bottomTrailing))
                    
                    VStack(alignment: .leading, spacing: 2) {
                        Text("Mac 데이터 클리너 Pro")
                            .font(.title)
                            .fontWeight(.bold)
                        
                        if !dataScanner.isScanning && dataScanner.totalSize > 0 {
                            Text("\(dataScanner.cleanupItems.count)개 항목 • \(dataScanner.totalSize.formatBytes())")
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                    }
                }
                
                Spacer()
                
                HStack(spacing: 12) {
                    Button(action: { showingReports = true }) {
                        Image(systemName: "chart.bar.doc.horizontal")
                            .font(.title2)
                    }
                    .buttonStyle(.plain)
                    .help("보고서")
                    
                    Button(action: { showingSettings = true }) {
                        Image(systemName: "gearshape")
                            .font(.title2)
                    }
                    .buttonStyle(.plain)
                    .help("설정")\n                    \n                    if dataScanner.isScanning {\n                        HStack(spacing: 8) {\n                            ProgressView()\n                                .scaleEffect(0.8)\n                            Text(\"스캔 중...\")\n                                .font(.caption)\n                                .foregroundColor(.secondary)\n                        }\n                    } else {\n                        Button(\"새로고침\") {\n                            withAnimation(.spring()) {\n                                dataScanner.scanForCleanupItems()\n                            }\n                        }\n                        .buttonStyle(.borderedProminent)\n                        .controlSize(.large)\n                    }\n                }\n            }\n            \n            // Search and filter row\n            HStack(spacing: 12) {\n                // Search field\n                HStack {\n                    Image(systemName: \"magnifyingglass\")\n                        .foregroundColor(.secondary)\n                    \n                    TextField(\"파일 검색...\", text: $searchText)\n                        .textFieldStyle(.plain)\n                }\n                .padding(.horizontal, 12)\n                .padding(.vertical, 8)\n                .background(Color(NSColor.controlBackgroundColor))\n                .cornerRadius(8)\n                \n                // Sort picker\n                Picker(\"정렬\", selection: $sortOption) {\n                    ForEach(ContentView.SortOption.allCases, id: \\.self) { option in\n                        Text(option.rawValue).tag(option)\n                    }\n                }\n                .pickerStyle(.menu)\n                .frame(width: 100)\n                \n                // Safe filter toggle\n                Toggle(\"안전한 항목만\", isOn: $showOnlySafe)\n                    .toggleStyle(.checkbox)\n                \n                Spacer()\n                \n                // Quick action buttons\n                HStack(spacing: 8) {\n                    Button(\"안전한 항목 선택\") {\n                        dataScanner.selectAllSafe()\n                    }\n                    .buttonStyle(.bordered)\n                    .controlSize(.small)\n                    \n                    Button(\"모두 해제\") {\n                        for category in CleanupCategory.allCases {\n                            dataScanner.deselectAll(in: category)\n                        }\n                    }\n                    .buttonStyle(.bordered)\n                    .controlSize(.small)\n                }\n            }\n            \n            // Scan progress\n            if dataScanner.isScanning {\n                VStack(alignment: .leading, spacing: 8) {\n                    HStack {\n                        Text(\"검색 중: \\(dataScanner.scanProgress.currentPath)\")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                            .lineLimit(1)\n                            .truncationMode(.middle)\n                        \n                        Spacer()\n                        \n                        Text(\"\\(Int(dataScanner.scanProgress.progress * 100))%\")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                    \n                    ProgressView(value: dataScanner.scanProgress.progress)\n                        .progressViewStyle(.linear)\n                }\n                .transition(.opacity.combined(with: .move(edge: .top)))\n            }\n        }\n        .padding()\n        .background(Color(NSColor.controlBackgroundColor).opacity(0.5))\n    }\n}\n\n// MARK: - Enhanced Sidebar\n\nstruct EnhancedSidebarView: View {\n    @ObservedObject var dataScanner: AdvancedDataScanner\n    @Binding var selectedCategory: CleanupCategory?\n    \n    var body: some View {\n        VStack(alignment: .leading, spacing: 0) {\n            // Categories header\n            HStack {\n                Text(\"카테고리\")\n                    .font(.headline)\n                    .fontWeight(.semibold)\n                \n                Spacer()\n                \n                if !dataScanner.itemsByCategory.isEmpty {\n                    Text(\"\\(dataScanner.itemsByCategory.keys.count)\")\n                        .font(.caption)\n                        .foregroundColor(.secondary)\n                        .padding(.horizontal, 6)\n                        .padding(.vertical, 2)\n                        .background(Color.secondary.opacity(0.2))\n                        .cornerRadius(4)\n                }\n            }\n            .padding(.horizontal)\n            .padding(.top)\n            \n            ScrollView {\n                LazyVStack(spacing: 4) {\n                    // All items option\n                    CategoryRowView(\n                        category: nil,\n                        items: dataScanner.cleanupItems,\n                        isSelected: selectedCategory == nil,\n                        dataScanner: dataScanner\n                    ) {\n                        selectedCategory = nil\n                    }\n                    \n                    // Individual categories\n                    ForEach(CleanupCategory.allCases) { category in\n                        if let items = dataScanner.itemsByCategory[category], !items.isEmpty {\n                            CategoryRowView(\n                                category: category,\n                                items: items,\n                                isSelected: selectedCategory == category,\n                                dataScanner: dataScanner\n                            ) {\n                                selectedCategory = selectedCategory == category ? nil : category\n                            }\n                        }\n                    }\n                }\n                .padding(.horizontal)\n            }\n            \n            Spacer()\n        }\n        .frame(width: 280)\n        .background(Color(NSColor.sidebarBackgroundColor))\n    }\n}\n\nstruct CategoryRowView: View {\n    let category: CleanupCategory?\n    let items: [CleanupItem]\n    let isSelected: Bool\n    let dataScanner: AdvancedDataScanner\n    let action: () -> Void\n    \n    private var totalSize: Int64 {\n        items.reduce(0) { $0 + $1.size }\n    }\n    \n    private var selectedSize: Int64 {\n        items.filter { $0.isSelected }.reduce(0) { $0 + $1.size }\n    }\n    \n    var body: some View {\n        Button(action: action) {\n            HStack(spacing: 12) {\n                // Icon\n                Image(systemName: category?.icon ?? \"folder\")\n                    .font(.title2)\n                    .foregroundColor(category?.color ?? .gray)\n                    .frame(width: 24)\n                \n                VStack(alignment: .leading, spacing: 2) {\n                    HStack {\n                        Text(category?.rawValue ?? \"전체\")\n                            .font(.subheadline)\n                            .fontWeight(.medium)\n                        \n                        Spacer()\n                        \n                        Text(\"\\(items.count)\")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                    \n                    HStack {\n                        Text(totalSize.formatBytes())\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                        \n                        if selectedSize > 0 {\n                            Text(\"• \\(selectedSize.formatBytes()) 선택됨\")\n                                .font(.caption)\n                                .foregroundColor(.blue)\n                        }\n                        \n                        Spacer()\n                    }\n                    \n                    if let category = category {\n                        Text(category.description)\n                            .font(.caption2)\n                            .foregroundColor(.tertiary)\n                            .lineLimit(1)\n                    }\n                }\n                \n                // Selection controls\n                Menu {\n                    if let category = category {\n                        Button(\"모두 선택\") {\n                            dataScanner.selectAll(in: category)\n                        }\n                        \n                        Button(\"모두 해제\") {\n                            dataScanner.deselectAll(in: category)\n                        }\n                    }\n                } label: {\n                    Image(systemName: \"ellipsis\")\n                        .foregroundColor(.secondary)\n                }\n                .menuStyle(.borderlessButton)\n                .frame(width: 20)\n            }\n            .padding(.horizontal, 12)\n            .padding(.vertical, 8)\n        }\n        .buttonStyle(.plain)\n        .background(\n            RoundedRectangle(cornerRadius: 8)\n                .fill(isSelected ? Color.accentColor.opacity(0.15) : Color.clear)\n        )\n        .overlay(\n            RoundedRectangle(cornerRadius: 8)\n                .stroke(isSelected ? Color.accentColor : Color.clear, lineWidth: 1)\n        )\n    }\n}\n\n// MARK: - Enhanced Main Content\n\nstruct EnhancedMainContentView: View {\n    let items: [CleanupItem]\n    @ObservedObject var dataScanner: AdvancedDataScanner\n    @Binding var selectedItem: CleanupItem?\n    @Binding var showingDetailView: Bool\n    \n    var body: some View {\n        VStack(spacing: 0) {\n            if items.isEmpty {\n                EmptyStateView()\n            } else {\n                // Header\n                HStack {\n                    Text(\"\\(items.count)개 항목\")\n                        .font(.headline)\n                    \n                    Spacer()\n                    \n                    let selectedCount = items.filter { $0.isSelected }.count\n                    if selectedCount > 0 {\n                        Text(\"\\(selectedCount)개 선택됨\")\n                            .font(.subheadline)\n                            .foregroundColor(.blue)\n                    }\n                }\n                .padding()\n                \n                Divider()\n                \n                // Items list\n                ScrollView {\n                    LazyVStack(spacing: 1) {\n                        ForEach(items) { item in\n                            EnhancedItemRowView(\n                                item: item,\n                                dataScanner: dataScanner\n                            ) {\n                                selectedItem = item\n                                showingDetailView = true\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nstruct EnhancedItemRowView: View {\n    let item: CleanupItem\n    @ObservedObject var dataScanner: AdvancedDataScanner\n    let onTap: () -> Void\n    \n    var body: some View {\n        HStack(spacing: 12) {\n            // Selection checkbox\n            Button {\n                dataScanner.toggleSelection(for: item)\n            } label: {\n                Image(systemName: item.isSelected ? \"checkmark.square.fill\" : \"square\")\n                    .foregroundColor(item.isSelected ? .accentColor : .secondary)\n            }\n            .buttonStyle(.plain)\n            \n            // Category icon\n            Image(systemName: item.category.icon)\n                .foregroundColor(item.category.color)\n                .frame(width: 20)\n            \n            VStack(alignment: .leading, spacing: 4) {\n                HStack {\n                    Text(item.name)\n                        .font(.subheadline)\n                        .fontWeight(.medium)\n                        .lineLimit(1)\n                    \n                    Spacer()\n                    \n                    // Risk indicator\n                    HStack(spacing: 4) {\n                        Image(systemName: item.riskLevel.icon)\n                            .font(.caption)\n                        Text(item.riskLevel.rawValue)\n                            .font(.caption)\n                    }\n                    .foregroundColor(item.riskLevel.color)\n                    .padding(.horizontal, 6)\n                    .padding(.vertical, 2)\n                    .background(item.riskLevel.color.opacity(0.1))\n                    .cornerRadius(4)\n                }\n                \n                HStack {\n                    Text(item.size.formatBytes())\n                        .font(.caption)\n                        .fontWeight(.medium)\n                        .foregroundColor(.primary)\n                    \n                    Text(\"•\")\n                        .font(.caption)\n                        .foregroundColor(.secondary)\n                    \n                    Text(item.lastModified.timeAgoDisplay())\n                        .font(.caption)\n                        .foregroundColor(.secondary)\n                    \n                    if !item.description.isEmpty {\n                        Text(\"•\")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                        \n                        Text(item.description)\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                            .lineLimit(1)\n                    }\n                    \n                    Spacer()\n                }\n            }\n            \n            // Info button\n            Button {\n                onTap()\n            } label: {\n                Image(systemName: \"info.circle\")\n                    .foregroundColor(.secondary)\n            }\n            .buttonStyle(.plain)\n            .help(\"상세 정보\")\n        }\n        .padding(.horizontal)\n        .padding(.vertical, 8)\n        .background(Color(NSColor.controlBackgroundColor).opacity(item.isSelected ? 0.5 : 0))\n        .onTapGesture {\n            dataScanner.toggleSelection(for: item)\n        }\n    }\n}\n\nstruct EmptyStateView: View {\n    var body: some View {\n        VStack(spacing: 16) {\n            Image(systemName: \"doc.text.magnifyingglass\")\n                .font(.system(size: 64))\n                .foregroundColor(.secondary)\n            \n            Text(\"항목이 없습니다\")\n                .font(.title2)\n                .fontWeight(.medium)\n            \n            Text(\"새로고침을 눌러 시스템을 스캔하거나\\n다른 카테고리를 선택해보세요\")\n                .font(.subheadline)\n                .foregroundColor(.secondary)\n                .multilineTextAlignment(.center)\n        }\n        .frame(maxWidth: .infinity, maxHeight: .infinity)\n    }\n}"