import SwiftUI

// MARK: - Item Detail View

struct ItemDetailView: View {
    let item: CleanupItem
    @Environment(\.dismiss) private var dismiss
    @State private var showingPathInFinder = false
    
    var body: some View {
        NavigationView {
            VStack(spacing: 0) {
                // Header
                HStack {
                    VStack(alignment: .leading, spacing: 4) {
                        Text(\"상세 정보\")\n                            .font(.title2)\n                            .fontWeight(.bold)\n                        \n                        Text(item.name)\n                            .font(.headline)\n                            .foregroundColor(.secondary)\n                    }\n                    \n                    Spacer()\n                    \n                    Button(\"완료\") {\n                        dismiss()\n                    }\n                    .buttonStyle(.borderedProminent)\n                }\n                .padding()\n                \n                Divider()\n                \n                ScrollView {\n                    VStack(spacing: 24) {\n                        // Basic Info\n                        DetailSection(title: \"기본 정보\", icon: \"info.circle\") {\n                            VStack(spacing: 12) {\n                                DetailRow(label: \"파일명\", value: item.name)\n                                DetailRow(label: \"크기\", value: item.size.formatBytes())\n                                DetailRow(label: \"카테고리\", value: item.category.rawValue)\n                                DetailRow(label: \"위험도\", value: item.riskLevel.rawValue, valueColor: item.riskLevel.color)\n                                DetailRow(label: \"수정일\", value: item.lastModified.timeAgoDisplay())\n                                DetailRow(label: \"시스템 파일\", value: item.isSystemFile ? \"예\" : \"아니오\")\n                            }\n                        }\n                        \n                        // Path Info\n                        DetailSection(title: \"경로 정보\", icon: \"folder\") {\n                            VStack(spacing: 12) {\n                                VStack(alignment: .leading, spacing: 4) {\n                                    Text(\"전체 경로\")\n                                        .font(.subheadline)\n                                        .fontWeight(.medium)\n                                    \n                                    Text(item.path)\n                                        .font(.system(.body, design: .monospaced))\n                                        .padding(8)\n                                        .background(Color(NSColor.controlBackgroundColor))\n                                        .cornerRadius(6)\n                                        .textSelection(.enabled)\n                                }\n                                \n                                HStack {\n                                    Button(\"Finder에서 보기\") {\n                                        NSWorkspace.shared.selectFile(item.path, inFileViewerRootedAtPath: \"\")\n                                    }\n                                    .buttonStyle(.bordered)\n                                    \n                                    Button(\"경로 복사\") {\n                                        NSPasteboard.general.clearContents()\n                                        NSPasteboard.general.setString(item.path, forType: .string)\n                                    }\n                                    .buttonStyle(.bordered)\n                                    \n                                    Spacer()\n                                }\n                            }\n                        }\n                        \n                        // Description\n                        if !item.description.isEmpty {\n                            DetailSection(title: \"설명\", icon: \"text.alignleft\") {\n                                Text(item.description)\n                                    .font(.body)\n                                    .padding()\n                                    .background(Color(NSColor.controlBackgroundColor))\n                                    .cornerRadius(8)\n                            }\n                        }\n                        \n                        // Safety Info\n                        DetailSection(title: \"안전성 정보\", icon: \"shield.checkered\") {\n                            VStack(alignment: .leading, spacing: 12) {\n                                HStack {\n                                    Image(systemName: item.riskLevel.icon)\n                                        .foregroundColor(item.riskLevel.color)\n                                    \n                                    VStack(alignment: .leading, spacing: 4) {\n                                        Text(item.riskLevel.rawValue)\n                                            .font(.subheadline)\n                                            .fontWeight(.medium)\n                                            .foregroundColor(item.riskLevel.color)\n                                        \n                                        Text(safetyDescription)\n                                            .font(.caption)\n                                            .foregroundColor(.secondary)\n                                    }\n                                    \n                                    Spacer()\n                                }\n                                \n                                if item.riskLevel != .safe {\n                                    HStack {\n                                        Image(systemName: \"exclamationmark.triangle\")\n                                            .foregroundColor(.orange)\n                                        \n                                        Text(\"삭제 전 백업을 권장합니다\")\n                                            .font(.caption)\n                                            .foregroundColor(.orange)\n                                    }\n                                    .padding(8)\n                                    .background(Color.orange.opacity(0.1))\n                                    .cornerRadius(6)\n                                }\n                            }\n                        }\n                        \n                        // Actions\n                        DetailSection(title: \"작업\", icon: \"wrench.and.screwdriver\") {\n                            VStack(spacing: 8) {\n                                Button(\"이 파일만 삭제\") {\n                                    // Handle single file deletion\n                                }\n                                .buttonStyle(.bordered)\n                                .foregroundColor(.red)\n                                \n                                Button(\"같은 카테고리 모두 선택\") {\n                                    // Handle category selection\n                                }\n                                .buttonStyle(.bordered)\n                                \n                                Button(\"이 경로를 제외 목록에 추가\") {\n                                    // Handle exclusion\n                                }\n                                .buttonStyle(.bordered)\n                            }\n                        }\n                    }\n                    .padding()\n                }\n            }\n        }\n        .frame(width: 500, height: 600)\n    }\n    \n    private var safetyDescription: String {\n        switch item.riskLevel {\n        case .safe:\n            return \"이 파일은 안전하게 삭제할 수 있습니다. 시스템 성능에 영향을 주지 않습니다.\"\n        case .medium:\n            return \"이 파일을 삭제하면 일부 앱의 설정이나 캐시가 초기화될 수 있습니다.\"\n        case .high:\n            return \"이 파일을 삭제하면 시스템이나 앱이 제대로 작동하지 않을 수 있습니다.\"\n        }\n    }\n}\n\nstruct DetailSection<Content: View>: View {\n    let title: String\n    let icon: String\n    @ViewBuilder let content: () -> Content\n    \n    var body: some View {\n        VStack(spacing: 12) {\n            HStack {\n                HStack(spacing: 8) {\n                    Image(systemName: icon)\n                        .foregroundColor(.accentColor)\n                    \n                    Text(title)\n                        .font(.headline)\n                        .fontWeight(.semibold)\n                }\n                \n                Spacer()\n            }\n            \n            content()\n        }\n        .padding()\n        .background(Color(NSColor.controlBackgroundColor))\n        .cornerRadius(12)\n    }\n}\n\nstruct DetailRow: View {\n    let label: String\n    let value: String\n    var valueColor: Color = .primary\n    \n    var body: some View {\n        HStack {\n            Text(label)\n                .font(.subheadline)\n                .fontWeight(.medium)\n                .frame(width: 80, alignment: .leading)\n            \n            Text(value)\n                .font(.subheadline)\n                .foregroundColor(valueColor)\n            \n            Spacer()\n        }\n    }\n}\n\n// MARK: - Enhanced Cleanup Confirmation\n\nstruct EnhancedCleanupConfirmationView: View {\n    let items: [CleanupItem]\n    let onConfirm: () -> Void\n    let onCancel: () -> Void\n    \n    @State private var createBackup = true\n    @State private var showDetailedList = false\n    \n    private var totalSize: Int64 {\n        items.reduce(0) { $0 + $1.size }\n    }\n    \n    private var riskBreakdown: [CleanupItem.RiskLevel: [CleanupItem]] {\n        Dictionary(grouping: items, by: { $0.riskLevel })\n    }\n    \n    var body: some View {\n        VStack(spacing: 24) {\n            // Header\n            VStack(spacing: 8) {\n                Image(systemName: \"trash.fill\")\n                    .font(.system(size: 48))\n                    .foregroundColor(.red)\n                \n                Text(\"정리 확인\")\n                    .font(.title)\n                    .fontWeight(.bold)\n                \n                Text(\"\\(items.count)개 항목 (\\(totalSize.formatBytes()))을 삭제하시겠습니까?\")\n                    .font(.subheadline)\n                    .foregroundColor(.secondary)\n                    .multilineTextAlignment(.center)\n            }\n            \n            // Risk breakdown\n            VStack(spacing: 12) {\n                Text(\"위험도별 분석\")\n                    .font(.headline)\n                    .fontWeight(.semibold)\n                \n                ForEach(CleanupItem.RiskLevel.allCases, id: \\.self) { risk in\n                    if let riskItems = riskBreakdown[risk], !riskItems.isEmpty {\n                        HStack {\n                            Image(systemName: risk.icon)\n                                .foregroundColor(risk.color)\n                            \n                            Text(risk.rawValue)\n                                .font(.subheadline)\n                                .fontWeight(.medium)\n                            \n                            Spacer()\n                            \n                            Text(\"\\(riskItems.count)개\")\n                                .font(.subheadline)\n                                .foregroundColor(.secondary)\n                            \n                            Text(riskItems.reduce(0) { $0 + $1.size }.formatBytes())\n                                .font(.subheadline)\n                                .fontWeight(.medium)\n                        }\n                        .padding(.horizontal, 12)\n                        .padding(.vertical, 8)\n                        .background(risk.color.opacity(0.1))\n                        .cornerRadius(8)\n                    }\n                }\n            }\n            .padding()\n            .background(Color(NSColor.controlBackgroundColor))\n            .cornerRadius(12)\n            \n            // Options\n            VStack(spacing: 12) {\n                Toggle(\"삭제 전 백업 생성\", isOn: $createBackup)\n                    .toggleStyle(.checkbox)\n                \n                Button(\"세부 목록 보기\") {\n                    showDetailedList.toggle()\n                }\n                .buttonStyle(.bordered)\n            }\n            \n            if showDetailedList {\n                ScrollView {\n                    LazyVStack(spacing: 4) {\n                        ForEach(items) { item in\n                            HStack {\n                                Image(systemName: item.category.icon)\n                                    .foregroundColor(item.category.color)\n                                    .frame(width: 20)\n                                \n                                VStack(alignment: .leading, spacing: 2) {\n                                    Text(item.name)\n                                        .font(.caption)\n                                        .lineLimit(1)\n                                    \n                                    Text(item.path)\n                                        .font(.caption2)\n                                        .foregroundColor(.secondary)\n                                        .lineLimit(1)\n                                }\n                                \n                                Spacer()\n                                \n                                Text(item.size.formatBytes())\n                                    .font(.caption)\n                                    .fontWeight(.medium)\n                                \n                                Image(systemName: item.riskLevel.icon)\n                                    .foregroundColor(item.riskLevel.color)\n                                    .font(.caption)\n                            }\n                            .padding(.horizontal, 8)\n                            .padding(.vertical, 4)\n                        }\n                    }\n                }\n                .frame(height: 200)\n                .background(Color(NSColor.controlBackgroundColor))\n                .cornerRadius(8)\n            }\n            \n            // Actions\n            HStack(spacing: 12) {\n                Button(\"취소\") {\n                    onCancel()\n                }\n                .buttonStyle(.bordered)\n                .keyboardShortcut(.escape)\n                \n                Button(\"삭제\") {\n                    onConfirm()\n                }\n                .buttonStyle(.borderedProminent)\n                .foregroundColor(.white)\n                .tint(.red)\n                .keyboardShortcut(.return)\n            }\n        }\n        .padding(24)\n        .frame(width: 500)\n    }\n}"